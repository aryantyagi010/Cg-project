class Animation {
    constructor(canvasId) {
        this.canvas = document.getElementById('myCanvas');
        this.ctx = this.canvas.getContext('2d');
        this.rotationAngle = 0;
        this.translationY = 256; // Initial position for the apple
        this.translateYY = 0; // Initial translation for the ship
    }

    draw() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.drawLand();
        this.drawClouds();
        this.drawTree();
        this.drawWindmill();
        this.drawSun();
        this.drawBird(100, 50);
        this.drawBird(200, 70);
        this.drawBird(300, 60);
        this.drawBird(450, 50);
        this.drawSmallCircle(80, 190, 20, 'grey');
        this.drawApple(597, this.translationY); // Dynamically animate apple
        this.drawApple(617, 230); // Static apple
        this.drawApple(557, 270); // Static apple
        this.person();
        // this.drawShip();
        this.drawmountain();
        this.newdrawWindill();
        this.animateShip();
        this.requestAnimationFrame();
    }

    person(){
        const ctx=this.ctx;
        ctx.save();
        ctx.transform(1.000000, 0.000000, 0.000000, 1.000000, 18.171100, 0.000000);
        
    // #path1-8
        ctx.beginPath();
        ctx.fillStyle = 'rgb(41, 47, 51)';
        ctx.lineWidth = 0.881899;
        ctx.moveTo(439.082490, 425.058230);
        ctx.bezierCurveTo(439.024707, 424.829778, 438.960691, 424.602674, 438.890500, 424.377130);
        ctx.lineTo(438.691530, 424.463030);
        ctx.lineTo(438.705730, 424.036550);
        ctx.bezierCurveTo(438.632430, 422.190590, 436.583370, 422.413380, 436.339020, 422.394280);
        ctx.bezierCurveTo(436.094670, 422.375180, 435.274360, 422.413380, 434.258540, 422.295580);
        ctx.bezierCurveTo(433.246230, 422.177770, 432.268830, 421.951840, 431.410120, 421.477630);
        ctx.bezierCurveTo(430.408270, 420.923830, 429.043400, 419.991310, 427.870520, 419.367500);
        ctx.bezierCurveTo(426.697620, 418.743690, 425.224530, 417.976660, 425.224530, 417.976660);
        ctx.bezierCurveTo(425.224530, 417.976660, 423.943450, 420.147260, 421.290490, 420.058140);
        ctx.bezierCurveTo(419.862780, 420.010440, 417.625220, 418.985570, 417.335500, 418.912370);
        ctx.bezierCurveTo(416.951510, 418.813670, 416.780470, 419.011070, 416.619890, 419.281560);
        ctx.bezierCurveTo(416.459310, 419.555270, 415.883350, 421.458530, 415.883350, 422.480180);
        ctx.bezierCurveTo(415.883350, 423.129440, 415.970650, 423.540020, 416.036940, 423.769170);
        ctx.lineTo(415.844960, 423.714970);
        ctx.bezierCurveTo(415.757660, 423.692670, 415.673910, 423.753170, 415.673910, 423.839110);
        ctx.lineTo(415.673910, 426.025630);
        ctx.bezierCurveTo(415.673910, 426.168850, 415.803060, 426.493480, 416.214960, 426.569860);
        ctx.bezierCurveTo(416.626880, 426.646260, 422.355170, 427.095010, 422.571580, 426.919960);
        ctx.bezierCurveTo(422.788010, 426.744920, 423.025380, 426.181580, 423.210390, 426.102010);
        ctx.bezierCurveTo(423.395410, 426.025610, 425.315300, 426.401180, 426.208930, 426.595330);
        ctx.bezierCurveTo(427.102550, 426.789470, 428.645460, 427.120480, 430.460630, 427.120480);
        ctx.bezierCurveTo(432.275800, 427.120480, 434.618100, 426.633520, 436.070230, 426.302520);
        ctx.bezierCurveTo(437.518880, 425.971520, 438.656870, 425.529120, 438.915180, 425.382720);
        ctx.bezierCurveTo(439.173490, 425.236320, 439.100190, 425.169480, 439.082740, 425.058080);
        ctx.closePath();
        ctx.fill();
        
    // #path2-8
        ctx.beginPath();
        ctx.fillStyle = 'rgb(75, 84, 93)';
        ctx.lineWidth = 0.881899;
        ctx.moveTo(421.744050, 425.519730);
        ctx.lineTo(420.312850, 424.606290);
        ctx.bezierCurveTo(420.340750, 424.564890, 423.206670, 420.955730, 428.826740, 422.486620);
        ctx.bezierCurveTo(429.147890, 422.085590, 429.629600, 421.455420, 430.093870, 420.755220);
        ctx.lineTo(431.587900, 421.582720);
        ctx.bezierCurveTo(430.750130, 422.843070, 429.873960, 423.867900, 429.839040, 423.909280);
        ctx.lineTo(429.451580, 424.361230);
        ctx.lineTo(428.858150, 424.167070);
        ctx.bezierCurveTo(424.044430, 422.604380, 421.768480, 425.487900, 421.744050, 425.519730);
        ctx.closePath();
        ctx.fill();
        
    // #path3
        ctx.beginPath();
        ctx.fillStyle = 'rgb(41, 47, 51)';
        ctx.lineWidth = 0.881899;
        ctx.moveTo(397.581230, 425.058230);
        ctx.bezierCurveTo(397.523444, 424.829778, 397.459424, 424.602674, 397.389230, 424.377130);
        ctx.lineTo(397.190250, 424.463030);
        ctx.lineTo(397.204450, 424.036550);
        ctx.bezierCurveTo(397.131150, 422.190590, 395.082080, 422.413380, 394.837730, 422.394280);
        ctx.bezierCurveTo(394.593380, 422.375180, 393.773060, 422.413380, 392.757260, 422.295580);
        ctx.bezierCurveTo(391.741460, 422.177770, 390.767550, 421.951840, 389.908830, 421.477630);
        ctx.bezierCurveTo(388.906980, 420.923830, 387.542110, 419.991310, 386.369220, 419.367500);
        ctx.bezierCurveTo(385.196340, 418.743690, 383.723260, 417.976660, 383.723260, 417.976660);
        ctx.bezierCurveTo(383.723260, 417.976660, 382.442160, 420.147260, 379.789210, 420.058140);
        ctx.bezierCurveTo(378.361490, 420.010440, 376.123940, 418.985570, 375.834200, 418.912370);
        ctx.bezierCurveTo(375.450220, 418.813670, 375.279190, 419.011070, 375.118610, 419.281560);
        ctx.bezierCurveTo(374.958040, 419.555270, 374.382060, 421.458530, 374.382060, 422.480180);
        ctx.bezierCurveTo(374.382060, 423.129440, 374.469360, 423.540020, 374.535660, 423.769170);
        ctx.lineTo(374.343670, 423.714970);
        ctx.bezierCurveTo(374.256370, 423.692670, 374.172620, 423.753170, 374.172620, 423.839110);
        ctx.lineTo(374.172620, 426.025630);
        ctx.bezierCurveTo(374.172620, 426.168850, 374.301780, 426.493480, 374.713680, 426.569860);
        ctx.bezierCurveTo(375.125590, 426.646260, 380.853870, 427.095010, 381.070310, 426.919960);
        ctx.bezierCurveTo(381.286720, 426.744920, 381.524100, 426.181580, 381.709100, 426.102010);
        ctx.bezierCurveTo(381.894110, 426.025610, 383.814020, 426.401180, 384.707640, 426.595330);
        ctx.bezierCurveTo(385.601270, 426.789470, 387.144170, 427.120480, 388.959340, 427.120480);
        ctx.bezierCurveTo(390.774530, 427.120480, 393.116810, 426.633520, 394.568950, 426.302520);
        ctx.bezierCurveTo(396.017600, 425.971520, 397.155570, 425.529120, 397.413890, 425.382720);
        ctx.bezierCurveTo(397.668720, 425.236320, 397.598890, 425.169480, 397.581450, 425.058080);
        ctx.closePath();
        ctx.fill();
        
    // #path4-9
        ctx.beginPath();
        ctx.fillStyle = 'rgb(75, 84, 93)';
        ctx.lineWidth = 0.881899;
        ctx.moveTo(380.239290, 425.522920);
        ctx.lineTo(378.811570, 424.606290);
        ctx.bezierCurveTo(378.839470, 424.568090, 381.684440, 420.949360, 387.325460, 422.486620);
        ctx.bezierCurveTo(387.643110, 422.085590, 388.128320, 421.455420, 388.592600, 420.755220);
        ctx.lineTo(390.086620, 421.582720);
        ctx.bezierCurveTo(389.248840, 422.843070, 388.372670, 423.867900, 388.337780, 423.909280);
        ctx.lineTo(387.950300, 424.361230);
        ctx.lineTo(387.356870, 424.167070);
        ctx.bezierCurveTo(382.588550, 422.613920, 380.333540, 425.401970, 380.239290, 425.522920);
        ctx.closePath();
        ctx.fill();
        
    // #path5
        ctx.beginPath();
        ctx.fillStyle = 'rgb(212, 171, 136)';
        ctx.lineWidth = 0.881899;
        ctx.moveTo(447.812810, 318.616000);
        ctx.bezierCurveTo(447.149570, 318.332740, 446.838900, 318.940630, 446.838900, 318.940630);
        ctx.lineTo(445.519400, 321.524990);
        ctx.bezierCurveTo(445.543900, 321.480490, 445.229670, 321.299010, 445.250620, 321.264000);
        ctx.lineTo(447.205420, 317.441570);
        ctx.bezierCurveTo(447.205420, 317.441570, 447.516100, 316.836870, 446.849370, 316.553600);
        ctx.bezierCurveTo(446.182640, 316.270340, 445.875460, 316.878250, 445.875460, 316.878250);
        ctx.lineTo(445.686950, 317.244260);
        ctx.lineTo(444.039330, 320.468330);
        ctx.bezierCurveTo(444.043330, 320.458230, 443.714700, 320.312380, 443.718180, 320.306020);
        ctx.lineTo(445.889410, 316.053930);
        ctx.bezierCurveTo(445.889410, 316.053930, 446.200090, 315.449210, 445.533360, 315.165950);
        ctx.bezierCurveTo(444.870130, 314.882690, 444.559450, 315.490580, 444.559450, 315.490580);
        ctx.lineTo(442.388220, 319.742680);
        ctx.bezierCurveTo(442.384220, 319.748680, 442.049620, 319.618540, 442.042640, 319.628030);
        ctx.lineTo(443.840360, 316.107960);
        ctx.bezierCurveTo(443.840360, 316.107960, 444.151040, 315.503250, 443.484300, 315.220000);
        ctx.bezierCurveTo(442.821060, 314.936730, 442.510400, 315.544630, 442.510400, 315.544630);
        ctx.lineTo(440.059900, 320.340950);
        ctx.bezierCurveTo(439.892350, 320.668770, 439.574690, 320.675140, 439.435060, 320.589200);
        ctx.bezierCurveTo(439.065040, 320.360050, 439.260520, 319.761700, 439.159290, 319.239740);
        ctx.bezierCurveTo(439.002210, 318.444070, 438.475120, 317.918920, 437.920080, 317.909370);
        ctx.bezierCurveTo(437.305720, 317.899270, 437.200990, 318.348580, 437.249860, 318.504530);
        ctx.bezierCurveTo(437.347560, 318.806900, 437.504690, 319.312940, 437.689700, 320.114990);
        ctx.bezierCurveTo(437.818860, 320.678330, 437.630400, 321.146180, 437.630400, 321.146180);
        ctx.bezierCurveTo(437.431278, 321.770209, 437.385959, 322.426662, 437.497690, 323.068530);
        ctx.bezierCurveTo(437.595390, 323.606410, 437.818830, 324.188840, 438.213280, 324.723540);
        ctx.lineTo(437.054370, 326.995990);
        ctx.lineTo(442.314890, 329.093390);
        ctx.lineTo(443.592490, 326.050720);
        ctx.bezierCurveTo(444.524520, 325.671980, 445.337860, 325.035440, 445.802120, 324.128370);
        ctx.lineTo(445.955720, 323.826010);
        ctx.lineTo(448.158370, 319.513450);
        ctx.bezierCurveTo(448.168370, 319.500750, 448.476030, 318.896010, 447.812800, 318.615940);
        ctx.closePath();
        ctx.fill();
        
    // #path6
        ctx.beginPath();
        ctx.fillStyle = 'rgb(183, 139, 96)';
        ctx.lineWidth = 0.881899;
        ctx.moveTo(439.749220, 320.611550);
        ctx.bezierCurveTo(439.858549, 320.581700, 439.951838, 320.515920, 440.011020, 320.426950);
        ctx.bezierCurveTo(440.597470, 320.770690, 441.368920, 321.292650, 441.724980, 322.155170);
        ctx.bezierCurveTo(442.087987, 322.976241, 442.052487, 323.899095, 441.627280, 324.694960);
        ctx.bezierCurveTo(441.396890, 325.134170, 441.026880, 325.229640, 441.281700, 324.545370);
        ctx.bezierCurveTo(441.602850, 323.686040, 441.780880, 321.789150, 439.693420, 320.710210);
        ctx.lineTo(439.501430, 320.614710);
        ctx.bezierCurveTo(439.504430, 320.614710, 439.630590, 320.643310, 439.749270, 320.610710);
        ctx.closePath();
        ctx.fill();
        
    // #path7
        ctx.beginPath();
        ctx.fillStyle = 'rgb(212, 171, 136)';
        ctx.lineWidth = 0.881899;
        ctx.moveTo(387.559340, 377.677370);
        ctx.bezierCurveTo(387.093999, 377.321627, 386.645610, 376.947846, 386.215410, 376.557060);
        ctx.bezierCurveTo(385.765110, 376.149670, 385.639430, 375.669090, 385.639430, 375.669090);
        ctx.bezierCurveTo(385.426576, 375.048660, 385.065324, 374.479046, 384.581740, 374.001350);
        ctx.bezierCurveTo(384.135460, 373.560222, 383.588538, 373.213661, 382.979490, 372.986070);
        ctx.lineTo(382.574580, 370.506740);
        ctx.lineTo(376.919600, 371.410630);
        ctx.lineTo(377.701520, 374.590150);
        ctx.bezierCurveTo(377.156960, 375.376270, 376.863740, 376.315170, 377.027810, 377.308180);
        ctx.lineTo(377.083710, 377.639180);
        ctx.lineTo(377.865630, 382.343210);
        ctx.bezierCurveTo(377.865630, 382.343210, 377.973880, 383.002030, 378.699910, 382.903370);
        ctx.bezierCurveTo(379.425990, 382.804670, 379.314280, 382.142700, 379.314280, 382.142700);
        ctx.lineTo(378.843040, 379.322830);
        ctx.bezierCurveTo(378.850040, 379.370530, 379.220030, 379.364230, 379.227010, 379.405530);
        ctx.lineTo(379.918180, 383.574870);
        ctx.bezierCurveTo(379.918180, 383.574870, 380.026430, 384.233700, 380.752460, 384.135040);
        ctx.bezierCurveTo(381.475040, 384.036340, 381.366830, 383.374370, 381.366830, 383.374370);
        ctx.lineTo(381.300530, 382.973350);
        ctx.lineTo(380.717580, 379.456470);
        ctx.bezierCurveTo(380.717580, 379.466570, 381.080620, 379.424670, 381.084100, 379.427870);
        ctx.lineTo(381.855550, 384.065060);
        ctx.bezierCurveTo(381.855550, 384.065060, 381.963800, 384.723880, 382.689830, 384.625220);
        ctx.bezierCurveTo(383.412420, 384.526520, 383.304200, 383.864550, 383.304200, 383.864550);
        ctx.lineTo(382.536250, 379.227350);
        ctx.bezierCurveTo(382.536250, 379.221350, 382.895790, 379.160550, 382.892290, 379.150950);
        ctx.lineTo(383.527610, 382.989300);
        ctx.bezierCurveTo(383.527610, 382.989300, 383.635860, 383.648110, 384.361900, 383.549440);
        ctx.bezierCurveTo(385.084470, 383.450740, 384.976270, 382.788780, 384.976270, 382.788780);
        ctx.lineTo(384.107080, 377.556430);
        ctx.bezierCurveTo(384.047780, 377.199960, 384.306050, 377.031280, 384.477100, 377.034450);
        ctx.bezierCurveTo(384.923910, 377.038450, 385.122880, 377.635980, 385.524310, 378.017910);
        ctx.bezierCurveTo(386.138680, 378.600340, 386.896160, 378.772210, 387.363920, 378.501680);
        ctx.bezierCurveTo(387.880550, 378.208870, 387.695540, 377.779200, 387.559410, 377.677360);
        ctx.closePath();
        ctx.fill();
        
    // #path8
        ctx.beginPath();
        ctx.fillStyle = 'rgb(41, 47, 51)';
        ctx.lineWidth = 0.881899;
        ctx.moveTo(437.885170, 324.704500);
        ctx.bezierCurveTo(437.885170, 324.704500, 430.697760, 338.456950, 429.849520, 338.902530);
        ctx.bezierCurveTo(429.085040, 339.303550, 423.848960, 338.768850, 416.937320, 340.029210);
        ctx.bezierCurveTo(410.029160, 341.289560, 407.358750, 339.535880, 400.290030, 339.790500);
        ctx.bezierCurveTo(396.184920, 339.936910, 391.866890, 341.229090, 389.025450, 341.852900);
        ctx.bezierCurveTo(384.707420, 342.804510, 377.589820, 352.155290, 375.593120, 355.411200);
        ctx.bezierCurveTo(374.046720, 357.928720, 374.123520, 360.758140, 374.451650, 362.960570);
        ctx.bezierCurveTo(374.723920, 364.800160, 374.654110, 367.690050, 377.314050, 373.813570);
        ctx.lineTo(383.314610, 372.919230);
        ctx.bezierCurveTo(383.314610, 372.919230, 382.305790, 360.879080, 383.164510, 359.577350);
        ctx.bezierCurveTo(383.520570, 359.039470, 387.782740, 352.833210, 391.203660, 351.706530);
        ctx.lineTo(419.785750, 350.481190);
        ctx.bezierCurveTo(419.785750, 350.481190, 431.566960, 348.937590, 434.802860, 346.766980);
        ctx.bezierCurveTo(437.274300, 345.108800, 443.519210, 326.871930, 443.519210, 326.871930);
        ctx.closePath();
        ctx.fill();
        
    // #path9
        ctx.beginPath();
        ctx.fillStyle = 'rgb(212, 171, 136)';
        ctx.lineWidth = 0.881899;
        ctx.moveTo(402.042370, 331.477290);
        ctx.bezierCurveTo(402.653240, 330.929860, 403.463100, 330.557490, 404.384650, 330.477930);
        ctx.bezierCurveTo(405.412235, 330.381066, 406.439821, 330.661328, 407.240273, 331.256766);
        ctx.bezierCurveTo(408.040724, 331.852205, 408.548125, 332.713787, 408.650320, 333.651070);
        ctx.lineTo(409.763860, 343.686130);
        ctx.bezierCurveTo(409.976228, 345.634525, 408.417885, 347.371665, 406.281253, 347.568317);
        ctx.bezierCurveTo(404.144620, 347.764968, 402.236940, 346.346834, 402.017940, 344.399050);
        ctx.lineTo(400.900900, 334.363990);
        ctx.bezierCurveTo(400.778710, 333.250050, 401.232530, 332.212500, 402.042370, 331.477290);
        ctx.closePath();
        ctx.fill();
        
    // #path10
        ctx.beginPath();
        ctx.fillStyle = 'rgb(212, 171, 136)';
        ctx.lineWidth = 0.881899;
        ctx.moveTo(414.947590, 326.509090);
        ctx.bezierCurveTo(414.947590, 332.393910, 410.378230, 337.164770, 404.730240, 337.164770);
        ctx.bezierCurveTo(399.082240, 337.164770, 394.505890, 332.393910, 394.505890, 326.509090);
        ctx.bezierCurveTo(394.505890, 320.627460, 399.082240, 315.856600, 404.730240, 315.856600);
        ctx.bezierCurveTo(410.378230, 315.856600, 414.947590, 320.627460, 414.947590, 326.509090);
        ctx.closePath();
        ctx.fill();
        
    // #path11-4
        ctx.beginPath();
        ctx.fillStyle = 'rgb(150, 59, 34)';
        ctx.lineWidth = 0.881899;
        ctx.moveTo(410.224630, 319.258900);
        ctx.bezierCurveTo(410.224630, 319.258900, 406.245220, 322.664400, 402.024920, 323.253190);
        ctx.bezierCurveTo(402.024920, 323.253190, 399.501120, 326.980130, 399.344040, 329.131640);
        ctx.bezierCurveTo(399.344040, 329.131640, 397.773200, 325.691140, 396.516550, 326.267210);
        ctx.bezierCurveTo(395.259890, 326.840100, 394.785150, 328.988420, 395.888210, 330.420630);
        ctx.bezierCurveTo(396.987800, 331.856030, 398.349180, 334.322630, 397.155350, 333.612880);
        ctx.bezierCurveTo(394.750240, 332.180670, 394.397670, 331.168570, 393.748390, 330.207400);
        ctx.bezierCurveTo(393.305070, 329.551760, 392.264840, 327.206110, 392.125210, 323.326400);
        ctx.bezierCurveTo(392.041410, 321.031670, 392.935070, 316.591790, 398.083880, 314.233420);
        ctx.bezierCurveTo(402.545040, 312.183760, 409.557900, 313.230860, 412.853150, 315.376010);
        ctx.bezierCurveTo(416.151900, 317.527510, 416.972220, 322.950830, 414.926640, 325.102340);
        ctx.bezierCurveTo(414.926640, 325.102340, 414.629950, 323.097240, 413.223170, 321.474060);
        ctx.bezierCurveTo(412.434270, 320.573360, 410.224630, 319.258900, 410.224630, 319.258900);
        ctx.closePath();
        ctx.fill();
        
    // #path12-7
        ctx.beginPath();
        ctx.fillStyle = 'rgb(221, 46, 68)';
        ctx.lineWidth = 0.881899;
        ctx.moveTo(391.084970, 342.989110);
        ctx.lineTo(391.084970, 372.438640);
        ctx.lineTo(415.809810, 372.362240);
        ctx.bezierCurveTo(415.809810, 372.362240, 417.991510, 363.759400, 419.419220, 357.884140);
        ctx.bezierCurveTo(421.073830, 351.089070, 415.652730, 340.723010, 415.652730, 340.723010);
        ctx.lineTo(411.875760, 340.379270);
        ctx.lineTo(411.135730, 337.161580);
        ctx.lineTo(407.449500, 338.434650);
        ctx.lineTo(406.922400, 344.007560);
        ctx.lineTo(405.330640, 338.705180);
        ctx.lineTo(399.926990, 338.275520);
        ctx.lineTo(399.284700, 341.671450);
        ctx.closePath();
        ctx.fill();
        
    // #path13-04
        ctx.beginPath();
        ctx.fillStyle = 'rgb(41, 47, 51)';
        ctx.lineWidth = 0.881899;
        ctx.moveTo(388.899770, 343.367860);
        ctx.bezierCurveTo(388.899770, 343.367860, 391.301400, 351.143190, 390.243700, 367.238110);
        ctx.bezierCurveTo(398.021050, 367.117140, 404.077470, 364.908380, 404.077470, 364.908380);
        ctx.bezierCurveTo(404.077470, 364.908380, 404.587110, 358.800780, 403.281580, 353.402910);
        ctx.bezierCurveTo(401.375640, 345.544820, 399.424330, 340.923540, 399.424330, 340.923540);
        ctx.closePath();
        ctx.moveTo(411.645360, 339.402220);
        ctx.bezierCurveTo(411.645360, 339.402220, 413.820090, 349.812830, 413.334880, 356.028630);
        ctx.bezierCurveTo(412.846180, 362.244450, 412.514550, 364.602830, 412.514550, 364.602830);
        ctx.bezierCurveTo(412.514550, 364.602830, 414.053970, 366.149630, 417.995010, 366.085980);
        ctx.bezierCurveTo(419.625180, 362.196720, 420.620030, 354.376820, 420.421050, 349.590040);
        ctx.bezierCurveTo(420.215100, 344.545460, 416.923350, 339.637740, 416.923350, 339.637740);
        ctx.closePath();
        ctx.moveTo(391.084970, 372.438640);
        ctx.bezierCurveTo(391.084970, 372.438640, 388.966100, 394.701630, 387.657080, 398.877340);
        ctx.bezierCurveTo(386.491170, 402.594730, 374.395800, 420.335110, 374.395800, 420.335110);
        ctx.bezierCurveTo(374.395800, 420.335110, 380.141540, 421.627280, 385.667360, 420.634280);
        ctx.bezierCurveTo(385.667360, 420.634280, 396.708540, 408.425450, 399.595380, 402.531080);
        ctx.bezierCurveTo(400.433140, 400.815610, 406.000850, 384.959390, 406.000850, 384.959390);
        ctx.bezierCurveTo(406.000850, 384.959390, 411.976990, 391.031980, 415.994820, 396.413930);
        ctx.bezierCurveTo(418.536070, 402.788870, 416.308980, 420.099590, 416.308980, 420.099590);
        ctx.bezierCurveTo(416.308980, 420.099590, 421.485730, 421.092580, 426.428600, 420.233270);
        ctx.bezierCurveTo(426.428600, 420.233270, 429.427140, 403.056230, 428.701070, 395.764650);
        ctx.bezierCurveTo(428.585850, 394.596600, 428.341530, 392.422820, 427.845830, 391.598500);
        ctx.bezierCurveTo(425.685070, 388.024330, 420.993530, 381.315200, 417.995010, 378.320270);
        ctx.bezierCurveTo(415.293180, 375.624520, 415.813300, 372.359080, 415.813300, 372.359080);
        ctx.closePath();
        ctx.fill();
        ctx.restore();
        
    
    }
    drawmountain(){
        const ctx=this.ctx;
        // #layer18
ctx.save();
ctx.transform(1.368980, 0.000000, 0.000000, 1.000000, -119.319000, 2.869120);

// #polygon1-2
ctx.save();
ctx.beginPath();
ctx.transform(0.308809, 0.000000, 0.000000, 0.275166, 307.828000, 158.601000);
ctx.fillStyle = 'rgb(131, 111, 90)';
ctx.moveTo(329.884000, 232.835000);
ctx.lineTo(372.796000, 118.131000);
ctx.lineTo(504.315000, 469.687000);
ctx.lineTo(241.277000, 469.687000);
ctx.closePath();
ctx.fill();
ctx.restore();

// #polygon2-9
ctx.save();
ctx.beginPath();
ctx.transform(0.308809, 0.000000, 0.000000, 0.275166, 307.828000, 158.601000);
ctx.fillStyle = 'rgb(153, 130, 105)';
ctx.moveTo(270.722000, 469.687000);
ctx.lineTo(7.684000, 469.687000);
ctx.lineTo(139.203000, 118.131000);
ctx.lineTo(183.417000, 236.318000);
ctx.closePath();
ctx.fill();
ctx.restore();

// #polygon3-7
ctx.save();
ctx.beginPath();
ctx.transform(0.308809, 0.000000, 0.000000, 0.275166, 307.828000, 158.601000);
ctx.fillStyle = 'rgb(181, 165, 147)';
ctx.moveTo(97.835000, 469.687000);
ctx.lineTo(255.999000, 46.908000);
ctx.lineTo(414.163000, 469.687000);
ctx.closePath();
ctx.fill();
ctx.restore();

// #g5
ctx.save();
ctx.transform(0.308809, 0.000000, 0.000000, 0.275166, 307.828000, 158.601000);

// #polygon4-68
ctx.beginPath();
ctx.fillStyle = 'rgb(236, 231, 227)';
ctx.moveTo(168.829000, 197.318000);
ctx.lineTo(139.205000, 118.131000);
ctx.lineTo(110.081000, 195.981000);
ctx.lineTo(139.705000, 225.605000);
ctx.closePath();
ctx.fill();

// #polygon5-2
ctx.beginPath();
ctx.fillStyle = 'rgb(236, 231, 227)';
ctx.moveTo(402.422000, 197.318000);
ctx.lineTo(372.798000, 118.131000);
ctx.lineTo(343.675000, 195.981000);
ctx.lineTo(373.299000, 225.605000);
ctx.closePath();
ctx.fill();
ctx.restore();

// #polygon6-9
ctx.save();
ctx.beginPath();
ctx.transform(0.308809, 0.000000, 0.000000, 0.275166, 307.828000, 158.601000);
ctx.fillStyle = 'rgb(153, 130, 105)';
ctx.moveTo(277.397000, 187.479000);
ctx.lineTo(311.120000, 469.687000);
ctx.lineTo(200.114000, 469.687000);
ctx.lineTo(233.838000, 187.479000);
ctx.closePath();
ctx.fill();
ctx.restore();

// #polygon7-9
ctx.save();
ctx.beginPath();
ctx.transform(0.308809, 0.000000, 0.000000, 0.275166, 307.828000, 158.601000);
ctx.fillStyle = 'rgb(236, 231, 227)';
ctx.moveTo(306.351000, 181.504000);
ctx.lineTo(255.999000, 46.910000);
ctx.lineTo(205.818000, 181.046000);
ctx.lineTo(256.312000, 231.541000);
ctx.closePath();
ctx.fill();
ctx.restore();
ctx.restore();

    }
   
    drawLand() {
        const ctx=this.ctx;
        ctx.beginPath();
    ctx.fillStyle = 'rgb(0, 255, 255)';
    ctx.lineWidth = 0.070004;
    ctx.rect(-0.956372, 0.000000, 705.802490, 292.649840);
    ctx.fill();

    // #rect2
    ctx.beginPath();
    ctx.fillStyle = 'rgb(0, 128, 0)';
    ctx.lineWidth = 0.070004;
    ctx.rect(-0.956372, 290.737090, 706.758910, 227.616550);
    ctx.fill();

    // #path2
    ctx.beginPath();
    ctx.fillStyle = 'rgb(136, 175, 233)';
    ctx.lineWidth = 0.070004;
    ctx.moveTo(172.146960, 289.780720);
    ctx.bezierCurveTo(76.509762, 516.440870, 33.473021, 516.440870, 33.473021, 516.440870);
    ctx.lineTo(170.234220, 518.353620);
    ctx.lineTo(306.039040, 289.780720);
    ctx.save();
    ctx.closePath();
    ctx.fill();

    }

    drawClouds() {
        const ctx=this.ctx;
        ctx.beginPath();
    ctx.fillStyle = 'white';
    ctx.arc(100, 50, 30, 0, Math.PI * 2); // Large circle
    ctx.arc(130, 50, 25, 0, Math.PI * 2); // Medium circle
    ctx.arc(160, 50, 30, 0, Math.PI * 2); // Large circle
    ctx.arc(180, 50, 25, 0, Math.PI * 2); // Medium circle
    ctx.fill();
    ctx.closePath();

    // Cloud 2
    ctx.beginPath();
    ctx.arc(350, 100, 30, 0, Math.PI * 2); // Large circle
    ctx.arc(380, 100, 25, 0, Math.PI * 2); // Medium circle
    ctx.arc(410, 100, 30, 0, Math.PI * 2); // Large circle
    ctx.arc(440, 100, 25, 0, Math.PI * 2); // Medium circle
    ctx.arc(470, 100, 30, 0, Math.PI * 2); // Large circle
    ctx.fill();
    ctx.closePath();

    }

    drawTree() {
        const ctx=this.ctx;
        ctx.beginPath();
ctx.fillStyle = 'rgb(28, 165, 56)';
ctx.lineWidth = 0.058467;
ctx.moveTo(657.410570, 224.982520);
ctx.lineTo(657.410570, 224.478320);
ctx.bezierCurveTo(660.712680, 205.991080, 651.501520, 186.999650, 620.739710, 191.537420);
ctx.bezierCurveTo(618.654170, 191.873560, 617.437600, 177.924100, 602.143600, 174.898910);
ctx.bezierCurveTo(595.713160, 173.722450, 583.026090, 173.554390, 576.074270, 174.730840);
ctx.bezierCurveTo(566.863110, 176.243430, 558.347130, 183.470270, 553.654660, 194.226480);
ctx.lineTo(548.962170, 194.226480);
ctx.bezierCurveTo(531.756420, 193.218080, 521.154900, 208.007870, 523.761820, 223.469930);
ctx.bezierCurveTo(524.109410, 224.982520, 523.935620, 226.495110, 524.109410, 228.007700);
ctx.bezierCurveTo(517.157600, 232.545480, 510.727160, 242.797490, 510.727160, 252.881440);
ctx.bezierCurveTo(510.727160, 267.671230, 522.719050, 278.259370, 535.406120, 278.259370);
ctx.lineTo(535.579920, 278.259370);
ctx.bezierCurveTo(534.015760, 293.553360, 548.266990, 299.099530, 559.737490, 299.099530);
ctx.lineTo(581.983320, 299.099530);
ctx.bezierCurveTo(585.111640, 299.099530, 588.066170, 298.427270, 590.846890, 297.250800);
ctx.bezierCurveTo(593.975210, 298.763400, 597.277330, 299.771790, 600.927030, 299.771790);
ctx.lineTo(623.346650, 299.771790);
ctx.bezierCurveTo(634.817160, 299.771790, 644.549710, 290.696240, 647.504220, 278.259370);
ctx.bezierCurveTo(647.504220, 278.259370, 671.488010, 291.368500, 677.397050, 253.385630);
ctx.bezierCurveTo(680.177780, 237.251320, 668.707280, 226.663170, 657.410570, 224.982520);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.fillStyle = 'rgb(101, 50, 11)';
ctx.lineWidth = 0.058467;
ctx.moveTo(636.555110, 262.797310);
ctx.bezierCurveTo(635.686130, 273.721590, 629.081900, 274.225790, 626.301170, 273.889660);
ctx.bezierCurveTo(627.170150, 272.713200, 628.039120, 271.368680, 628.734310, 269.856080);
ctx.bezierCurveTo(633.426780, 260.948590, 628.734310, 250.696580, 630.124670, 250.192380);
ctx.bezierCurveTo(636.728910, 246.999130, 632.905400, 237.083250, 632.905400, 237.083250);
ctx.lineTo(631.341250, 237.419380);
ctx.bezierCurveTo(633.426780, 242.629420, 631.688840, 246.326870, 628.386720, 248.007520);
ctx.bezierCurveTo(620.044540, 252.041110, 616.221040, 243.637820, 616.221040, 243.637820);
ctx.lineTo(615.525850, 245.486540);
ctx.bezierCurveTo(618.654170, 252.377240, 627.517750, 252.377240, 627.517750, 252.377240);
ctx.lineTo(627.691530, 259.267930);
ctx.bezierCurveTo(621.434900, 267.503160, 618.654170, 259.267930, 618.654170, 259.267930);
ctx.lineTo(618.306570, 261.452790);
ctx.bezierCurveTo(623.520450, 270.024140, 627.170150, 262.461190, 627.170150, 262.461190);
ctx.bezierCurveTo(626.822560, 268.847690, 623.172860, 272.713200, 619.175560, 275.066120);
ctx.bezierCurveTo(611.354760, 279.771960, 603.186370, 278.595500, 603.186380, 278.595500);
ctx.bezierCurveTo(607.531260, 275.570310, 609.095410, 272.209000, 608.400240, 267.503160);
ctx.bezierCurveTo(607.705050, 262.629250, 605.445710, 263.133450, 601.100830, 260.108270);
ctx.bezierCurveTo(598.320100, 258.259540, 596.755940, 255.738550, 596.234550, 251.032720);
ctx.bezierCurveTo(595.539360, 246.326870, 602.491190, 242.965550, 602.491190, 242.965550);
ctx.lineTo(601.622210, 241.452960);
ctx.bezierCurveTo(589.108940, 245.990730, 595.539360, 257.587280, 595.539360, 257.587280);
ctx.bezierCurveTo(591.194480, 257.755340, 590.673090, 257.755340, 588.239950, 251.704970);
ctx.bezierCurveTo(585.806820, 245.654610, 579.897780, 249.352060, 579.897780, 249.352060);
ctx.lineTo(580.245370, 250.528520);
ctx.bezierCurveTo(584.764050, 247.503340, 586.675800, 254.057900, 586.675800, 254.057900);
ctx.bezierCurveTo(587.892370, 261.788920, 595.191780, 261.284720, 595.191780, 261.284720);
ctx.bezierCurveTo(608.052650, 263.973780, 599.362880, 282.461020, 588.761340, 279.771960);
ctx.bezierCurveTo(572.424570, 275.570310, 575.031500, 271.872870, 575.031500, 271.872870);
ctx.bezierCurveTo(584.764050, 266.662830, 577.638430, 258.427610, 577.638430, 258.427610);
ctx.lineTo(576.074270, 259.604070);
ctx.bezierCurveTo(581.288140, 261.620860, 576.074270, 271.704800, 570.686620, 268.847690);
ctx.bezierCurveTo(564.777570, 265.654440, 569.817630, 259.772130, 569.817630, 259.772130);
ctx.lineTo(568.079680, 260.108270);
ctx.bezierCurveTo(562.865820, 268.343490, 572.250770, 271.872870, 572.250770, 271.872870);
ctx.bezierCurveTo(572.598370, 275.066120, 573.988730, 277.250970, 575.552890, 278.763570);
ctx.bezierCurveTo(567.036900, 278.259370, 548.962170, 275.066120, 554.523630, 256.746950);
ctx.bezierCurveTo(554.523630, 256.746950, 570.512820, 257.755340, 571.381790, 243.469750);
ctx.lineTo(569.122450, 242.629420);
ctx.bezierCurveTo(569.122450, 242.629420, 567.905880, 254.562100, 554.176040, 253.889830);
ctx.bezierCurveTo(554.176040, 253.889830, 543.748310, 251.536910, 549.657360, 240.276510);
ctx.lineTo(547.745610, 239.940370);
ctx.bezierCurveTo(547.745610, 239.940370, 540.446200, 250.192380, 551.395310, 256.410820);
ctx.bezierCurveTo(551.395310, 256.410820, 548.440780, 264.477970, 551.742910, 271.704800);
ctx.bezierCurveTo(547.398020, 273.721590, 544.269690, 268.175420, 544.269690, 268.175420);
ctx.lineTo(543.922110, 271.536740);
ctx.bezierCurveTo(547.745610, 275.906450, 551.221520, 274.729990, 552.785670, 273.889660);
ctx.bezierCurveTo(556.261580, 279.267760, 564.082380, 283.805540, 580.245370, 283.469410);
ctx.lineTo(580.071570, 370.023290);
ctx.lineTo(607.705050, 370.023290);
ctx.lineTo(604.229150, 283.469410);
ctx.bezierCurveTo(612.571330, 282.292950, 619.349350, 281.788750, 624.737010, 275.570310);
ctx.bezierCurveTo(637.250300, 278.427440, 638.293060, 262.797310, 638.293060, 262.797310);
ctx.save();
ctx.closePath();
ctx.fill();

    }

    drawWindmill() {
        const ctx=this.ctx;

          // #g16
	  ctx.save();
	  ctx.transform(0.283366, 0.000000, 0.000000, 0.321016, 7.306000, 129.297000);
	  
  // #g3
	  
  // #polygon1
	  ctx.beginPath();
	  ctx.fillStyle = 'rgb(255, 221, 9)';
	  ctx.moveTo(277.243000, 192.889000);
	  ctx.lineTo(321.728000, 229.820000);
	  ctx.lineTo(315.852000, 160.154000);
	  ctx.closePath();
	  ctx.fill();
	  
  // #path1
	  ctx.beginPath();
	  ctx.fillStyle = 'rgb(255, 221, 9)';
	  ctx.moveTo(252.062000, 167.708000);
	  ctx.lineTo(298.226000, 112.311000);
	  ctx.bezierCurveTo(286.475000, 99.721000, 269.688000, 92.167000, 251.223000, 92.167000);
	  ctx.bezierCurveTo(232.758000, 92.167000, 216.810000, 99.721000, 205.059000, 112.311000);
	  ctx.closePath();
	  ctx.fill();
	  
  // #polygon2
	  ctx.beginPath();
	  ctx.fillStyle = 'rgb(255, 221, 9)';
	  ctx.moveTo(180.718000, 231.498000);
	  ctx.lineTo(226.882000, 192.889000);
	  ctx.lineTo(186.593000, 159.315000);
	  ctx.closePath();
	  ctx.fill();
	  
  // #polygon3
	  ctx.beginPath();
	  ctx.fillStyle = 'rgb(255, 221, 9)';
	  ctx.moveTo(174.003000, 309.557000);
	  ctx.lineTo(158.895000, 495.052000);
	  ctx.lineTo(343.551000, 495.052000);
	  ctx.lineTo(327.603000, 308.718000);
	  ctx.lineTo(252.062000, 218.069000);
	  ctx.closePath();
	  ctx.fill();
	  
  // #polygon4
	  ctx.beginPath();
	  ctx.fillStyle = 'rgb(255, 255, 255)';
	  ctx.moveTo(174.003000, 309.557000);
	  ctx.lineTo(158.895000, 495.052000);
	  ctx.lineTo(184.075000, 495.052000);
	  ctx.lineTo(199.184000, 309.557000);
	  ctx.lineTo(200.862000, 117.348000);
	  ctx.closePath();
	  ctx.fill();
	  
  // #polygon5
	  ctx.beginPath();
	  ctx.fillStyle = 'rgb(253, 152, 8)';
	  ctx.moveTo(343.551000, 495.052000);
	  ctx.lineTo(327.603000, 308.718000);
	  ctx.lineTo(302.423000, 117.348000);
	  ctx.lineTo(301.584000, 118.187000);
	  ctx.lineTo(302.423000, 308.718000);
	  ctx.lineTo(318.370000, 495.052000);
	  ctx.closePath();
	  ctx.fill();
	  
  // #polygon6
	  ctx.beginPath();
	  ctx.fillStyle = 'rgb(28, 215, 89)';
	  ctx.moveTo(226.043000, 427.905000);
	  ctx.lineTo(226.043000, 495.052000);
	  ctx.lineTo(276.403000, 495.052000);
	  ctx.lineTo(276.403000, 427.905000);
	  ctx.closePath();
	  ctx.fill();
	  
  // #polygon7
	  ctx.beginPath();
	  ctx.fillStyle = 'rgb(21, 161, 67)';
	  ctx.moveTo(259.616000, 427.905000);
	  ctx.lineTo(259.616000, 495.052000);
	  ctx.lineTo(276.403000, 495.052000);
	  ctx.lineTo(276.403000, 427.905000);
	  ctx.closePath();
	  ctx.fill();
	  
  // #polygon8
	  ctx.beginPath();
	  ctx.fillStyle = 'rgb(28, 215, 89)';
	  ctx.moveTo(217.649000, 327.184000);
	  ctx.lineTo(217.649000, 377.544000);
	  ctx.lineTo(284.797000, 377.544000);
	  ctx.lineTo(284.797000, 327.184000);
	  ctx.closePath();
	  ctx.fill();
	  
  // #polygon9
	  ctx.beginPath();
	  ctx.fillStyle = 'rgb(21, 161, 67)';
	  ctx.moveTo(268.010000, 327.184000);
	  ctx.lineTo(268.010000, 377.544000);
	  ctx.lineTo(284.797000, 377.544000);
	  ctx.lineTo(284.797000, 327.184000);
	  ctx.closePath();
	  ctx.fill();
	  
  // #polygon10

	  
  // #path10
	
	  
  // #path11
	  ctx.beginPath();
	  ctx.moveTo(276.403000, 503.446000);
	  ctx.lineTo(226.042000, 503.446000);
	  ctx.bezierCurveTo(221.006000, 503.446000, 217.649000, 500.089000, 217.649000, 495.053000);
	  ctx.lineTo(217.649000, 427.905000);
	  ctx.bezierCurveTo(217.649000, 422.869000, 221.006000, 419.512000, 226.042000, 419.512000);
	  ctx.lineTo(276.403000, 419.512000);
	  ctx.bezierCurveTo(281.439000, 419.512000, 284.796000, 422.869000, 284.796000, 427.905000);
	  ctx.lineTo(284.796000, 495.053000);
	  ctx.bezierCurveTo(284.797000, 500.088000, 281.439000, 503.446000, 276.403000, 503.446000);
	  ctx.closePath();
	  ctx.moveTo(234.436000, 486.659000);
	  ctx.lineTo(268.010000, 486.659000);
	  ctx.lineTo(268.010000, 436.298000);
	  ctx.lineTo(234.436000, 436.298000);
	  ctx.closePath();
	  ctx.fill();
	  
  // #path12
	  ctx.beginPath();
	  ctx.moveTo(284.797000, 385.938000);
	  ctx.lineTo(217.649000, 385.938000);
	  ctx.bezierCurveTo(212.613000, 385.938000, 209.256000, 382.581000, 209.256000, 377.545000);
	  ctx.lineTo(209.256000, 327.184000);
	  ctx.bezierCurveTo(209.256000, 322.148000, 212.613000, 318.791000, 217.649000, 318.791000);
	  ctx.lineTo(284.797000, 318.791000);
	  ctx.bezierCurveTo(289.833000, 318.791000, 293.190000, 322.148000, 293.190000, 327.184000);
	  ctx.lineTo(293.190000, 377.545000);
	  ctx.bezierCurveTo(293.190000, 382.580000, 289.833000, 385.938000, 284.797000, 385.938000);
	  ctx.closePath();
	  ctx.moveTo(226.043000, 369.151000);
	  ctx.lineTo(276.404000, 369.151000);
	  ctx.lineTo(276.404000, 335.577000);
	  ctx.lineTo(226.043000, 335.577000);
	  ctx.closePath();
	  ctx.fill();
	  
  // #path13
	  ctx.beginPath();
	  ctx.moveTo(321.728000, 238.213000);
	  ctx.bezierCurveTo(320.049000, 238.213000, 317.531000, 237.374000, 316.692000, 236.534000);
	  ctx.lineTo(272.207000, 199.603000);
	  ctx.bezierCurveTo(270.528000, 197.924000, 268.850000, 195.406000, 268.850000, 192.888000);
	  ctx.bezierCurveTo(268.850000, 190.370000, 269.689000, 187.852000, 272.207000, 186.173000);
	  ctx.lineTo(310.817000, 153.439000);
	  ctx.bezierCurveTo(313.335000, 151.760000, 316.692000, 150.921000, 319.210000, 151.760000);
	  ctx.bezierCurveTo(321.728000, 152.599000, 324.246000, 155.957000, 324.246000, 158.475000);
	  ctx.lineTo(330.121000, 228.141000);
	  ctx.bezierCurveTo(330.121000, 231.498000, 328.442000, 234.856000, 325.924000, 236.534000);
	  ctx.bezierCurveTo(324.246000, 238.213000, 322.567000, 238.213000, 321.728000, 238.213000);
	  ctx.closePath();
	  ctx.moveTo(289.833000, 192.889000);
	  ctx.lineTo(310.817000, 210.515000);
	  ctx.lineTo(308.299000, 176.941000);
	  ctx.closePath();
	  ctx.fill();
	  
  // #path14
	  ctx.beginPath();
	  ctx.moveTo(252.062000, 176.102000);
	  ctx.bezierCurveTo(249.544000, 176.102000, 247.026000, 175.263000, 245.347000, 172.745000);
	  ctx.lineTo(198.344000, 117.348000);
	  ctx.bezierCurveTo(195.826000, 113.991000, 195.826000, 108.955000, 198.344000, 106.437000);
	  ctx.bezierCurveTo(212.613000, 92.168000, 231.078000, 83.775000, 251.223000, 83.775000);
	  ctx.bezierCurveTo(271.368000, 83.775000, 290.672000, 92.168000, 304.102000, 107.277000);
	  ctx.bezierCurveTo(306.620000, 110.634000, 307.459000, 114.831000, 304.102000, 118.188000);
	  ctx.lineTo(257.938000, 173.585000);
	  ctx.bezierCurveTo(257.098000, 175.262000, 254.580000, 176.102000, 252.062000, 176.102000);
	  ctx.closePath();
	  ctx.moveTo(216.810000, 113.151000);
	  ctx.lineTo(252.062000, 155.118000);
	  ctx.lineTo(286.475000, 113.990000);
	  ctx.bezierCurveTo(276.403000, 104.757000, 263.813000, 100.560000, 251.223000, 100.560000);
	  ctx.bezierCurveTo(238.633000, 100.561000, 226.043000, 104.757000, 216.810000, 113.151000);
	  ctx.closePath();
	  ctx.fill();
	  
  // #path15
	  ctx.beginPath();
	  ctx.moveTo(180.718000, 239.892000);
	  ctx.bezierCurveTo(179.039000, 239.892000, 178.200000, 239.892000, 176.521000, 239.053000);
	  ctx.bezierCurveTo(173.164000, 237.374000, 171.485000, 234.017000, 172.324000, 230.660000);
	  ctx.lineTo(178.199000, 158.476000);
	  ctx.bezierCurveTo(178.199000, 155.119000, 180.717000, 152.601000, 183.235000, 151.761000);
	  ctx.bezierCurveTo(185.753000, 150.922000, 189.110000, 150.922000, 191.628000, 153.440000);
	  ctx.lineTo(231.917000, 187.014000);
	  ctx.bezierCurveTo(233.596000, 188.693000, 235.274000, 191.211000, 235.274000, 193.729000);
	  ctx.bezierCurveTo(235.274000, 196.247000, 234.435000, 198.765000, 231.917000, 200.444000);
	  ctx.lineTo(185.753000, 239.054000);
	  ctx.bezierCurveTo(184.915000, 239.052000, 182.397000, 239.892000, 180.718000, 239.892000);
	  ctx.closePath();
	  ctx.moveTo(194.148000, 176.102000);
	  ctx.lineTo(190.791000, 212.194000);
	  ctx.lineTo(213.453000, 192.889000);
	  ctx.closePath();
	  ctx.fill();
	  
  // #path16
	  ctx.beginPath();
	  ctx.moveTo(343.551000, 503.446000);
	  ctx.lineTo(158.895000, 503.446000);
	  ctx.bezierCurveTo(156.377000, 503.446000, 154.698000, 502.607000, 153.020000, 500.928000);
	  ctx.bezierCurveTo(151.341000, 499.249000, 150.502000, 496.731000, 150.502000, 494.213000);
	  ctx.lineTo(165.610000, 308.718000);
	  ctx.bezierCurveTo(165.610000, 307.039000, 166.449000, 305.361000, 167.289000, 303.682000);
	  ctx.lineTo(244.509000, 212.193000);
	  ctx.bezierCurveTo(246.188000, 210.514000, 248.706000, 208.836000, 251.224000, 208.836000);
	  ctx.bezierCurveTo(253.742000, 208.836000, 256.260000, 209.675000, 257.939000, 212.193000);
	  ctx.lineTo(334.319000, 302.842000);
	  ctx.bezierCurveTo(335.158000, 304.521000, 335.998000, 306.199000, 335.998000, 307.878000);
	  ctx.lineTo(351.946000, 494.212000);
	  ctx.bezierCurveTo(351.946000, 496.730000, 351.107000, 499.248000, 349.428000, 500.927000);
	  ctx.bezierCurveTo(347.748000, 502.607000, 346.069000, 503.446000, 343.551000, 503.446000);
	  ctx.closePath();
	  ctx.moveTo(168.128000, 486.659000);
	  ctx.lineTo(334.318000, 486.659000);
	  ctx.lineTo(320.049000, 312.075000);
	  ctx.lineTo(252.062000, 231.498000);
	  ctx.lineTo(182.396000, 312.914000);
	  ctx.closePath();
	  ctx.fill();
	  ctx.restore();
  

    }

    drawSun() {
        const ctx=this.ctx;

        // Draw sun here

        ctx.beginPath();
        ctx.fillStyle = 'yellow';
        ctx.arc(580, 100, 30, 0, Math.PI * 2); // Adjusted x-coordinate to 580
        ctx.fill();
        ctx.closePath();
    
        // Sun rays
        ctx.beginPath();
        ctx.strokeStyle = 'yellow';
        ctx.lineWidth = 2;
        ctx.moveTo(580, 70); // Adjusted x-coordinate
        ctx.lineTo(580, 40); // Top
        ctx.moveTo(580, 130); // Adjusted x-coordinate
        ctx.lineTo(580, 160); // Bottom
        ctx.moveTo(550, 100); // Adjusted x-coordinate
        ctx.lineTo(520, 100); // Left
        ctx.moveTo(610, 100); // Adjusted x-coordinate
        ctx.lineTo(640, 100); // Right
        ctx.moveTo(535, 55); // Adjusted x-coordinate
        ctx.lineTo(515, 35); // Top left
        ctx.moveTo(625, 55); // Adjusted x-coordinate
        ctx.lineTo(645, 35); // Top right
        ctx.moveTo(535, 145); // Adjusted x-coordinate
        ctx.lineTo(515, 165); // Bottom left
        ctx.moveTo(625, 145); // Adjusted x-coordinate
        ctx.lineTo(645, 165); // Bottom right
        ctx.stroke();
        ctx.closePath();
    }

    drawBird(x, y) {

        const ctx=this.ctx;
		
			// Wing (arc)
			ctx.beginPath();
			ctx.fillStyle = 'black';
			ctx.arc(x+5 , y + 20, 6, Math.PI,-0.3);
			ctx.fill();
			ctx.closePath();
		
			// Wing (arc)
			ctx.beginPath();
			ctx.fillStyle = 'black';
			ctx.arc(x + 17, y + 19, 7, Math.PI,-0.7);
			ctx.fill();
			ctx.closePath();

    }

    drawSmallCircle(x, y, radius, color) {
        const ctx=this.ctx;
        ctx.beginPath();
        ctx.arc(x, y, radius, 0, 2 * Math.PI);
        ctx.fillStyle = color;
        ctx.fill();
        ctx.closePath();
    }

    drawApple(x, y) {
        this.ctx.beginPath();
        this.ctx.arc(x, y, 10, 0, Math.PI * 2, true);
        this.ctx.fillStyle = "red";
        this.ctx.fill();
        this.ctx.beginPath();
        this.ctx.moveTo(x, y - 10);
        this.ctx.lineTo(x, y - 20);
        this.ctx.stroke();
    }

    animateShip() {
        const ctx = this.ctx;
        let translateYY = this.translateYY;// Initial translation amount
        let newt=0;
        const animationSpeed = 0.5; // Speed of animation
        let initialX = 0; // Initial x position
        let initialY = 0; // Initial y position
        let targetX = -400; // Target x position
        let targetY = 0; // Target y position
        let deltaX = (targetX - initialX) / 50; // Adjust the number of frames based on the desired animation duration
        let deltaY = (targetY - initialY) / 50; // Adjust the number of frames based on the desired animation duration
        let initialScale = 1; // Initial scale factor
        let targetScale = 2; // Target scale factor
        let deltaScale = (targetScale - initialScale) / 50; 
        function draw1() {
            // ctx.clearRect(0, 0, canvas.width, canvas.height);
            // Save the current transformation matrix
            ctx.save();
        
            // Translate and scale the coordinate system
            ctx.translate(-8*translateYY,0); // Translate by translateY units in y
            ctx.scale(initialScale + deltaScale * translateYY, initialScale + deltaScale * translateYY); // Scale up based on translateY
            // console.log(translateYY);
            // Draw the ship
            // ctx.save();
            // Translate the coordinate system
            // Ship body (rectangle)
            ctx.beginPath();
            ctx.fillStyle = 'rgb(102, 51, 0)';
            ctx.fillRect(195, 250, 100, 50); // x, y, width, height
            ctx.closePath();
        
            // Ship deck (rectangle)
            ctx.beginPath();
            ctx.fillStyle = 'rgb(204, 153, 102)';
            ctx.fillRect(207.5, 225, 75, 25); // x, y, width, height
            ctx.closePath();
        
            // Ship cabin (rectangle)
            ctx.beginPath();
            ctx.fillStyle = 'rgb(0, 102, 204)';
            ctx.fillRect(225, 230, 40, 20); // x, y, width, height
            ctx.closePath();
        
            // Ship flag (triangle)
            ctx.beginPath();
            ctx.fillStyle = 'rgb(255, 0, 0)';
            ctx.moveTo(270, 212.5); // Start point
            ctx.lineTo(270, 225); // First point
            ctx.lineTo(295, 218.75); // Second point
            ctx.fill();
            ctx.closePath();
        
            // Ship windows (circles)
            ctx.beginPath();
            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
            ctx.arc(230, 240, 5, 0, Math.PI * 2); // x, y, radius, start angle, end angle
            ctx.arc(255, 240, 5, 0, Math.PI * 2); // x, y, radius, start angle, end angle
            ctx.fill();
            ctx.closePath();

            ctx.restore();
            
            newt+=1;
            // Restore the transformation matrix
            ctx.restore();
        
            // Increment translateY for next frame
            
            // Request animation frame to continue the animation
            requestAnimationFrame(draw1);
        

        }
        

    draw1();
        }

    
// Adjust the number of frames based on the desired animation duration



    newdrawWindill() {
        const ctx = this.ctx;
        let rotationA = this.rotationAngle;  // Initial rotation angle
    
        function draw1() {
            // Clear the canvas (if needed uncomment the line below)
            // ctx.clearRect(0, 0, canvas.width, canvas.height);
    
            ctx.save();
            // Apply rotation around the center of the first rectangle
            ctx.translate(25 + 55, 180 + 11); // Translate to the center of the rectangle
            ctx.rotate(rotationA * Math.PI / 180); // Rotate around the center
            ctx.translate(-(25 + 55), -(180 + 11)); // Translate back to the original position
    
            // First rectangle
            ctx.beginPath();
            ctx.fillStyle = 'rgb(34,0,102)'; // Dark blue color
            ctx.fillRect(25, 180, 118, 22); // x, y, width, height
            ctx.closePath();
            ctx.restore();
    
            ctx.save();
            // Apply rotation around the center of the second rectangle
            ctx.translate(67 + 11, 130 + 60); // Translate to the center of the rectangle
            ctx.rotate(rotationA * Math.PI / 180); // Rotate around the center
            ctx.translate(-(67 + 11), -(130 + 60)); // Translate back to the original position
    
            // Second rectangle
            ctx.beginPath();
            ctx.fillStyle = 'rgb(0,128,106)'; // Sky blue color
            ctx.fillRect(67, 130, 22, 120); // x, y, width, height
            ctx.closePath();
            ctx.restore();
    
            // Increment rotation angle for next frame
            // rotationA += 1;
    
            // Request animation frame to continue the animation
            requestAnimationFrame(draw1);
        }
    
        // Start the animation
        draw1();
    }
	

    requestAnimationFrame() {
        this.rotationAngle+=1;
        if (this.translationY < 400) {this.translationY += 1;
}       
    if(this.translateYY<35)
    this.translateYY+=0.1;

        window.requestAnimationFrame(() => this.draw());
    }
}
